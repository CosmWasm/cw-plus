{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ChannelResponse",
  "type": "object",
  "required": [
    "balances",
    "info",
    "total_sent"
  ],
  "properties": {
    "balances": {
      "description": "How many tokens we currently have pending over this channel",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Amount"
      }
    },
    "info": {
      "description": "Information on the channel's connection",
      "allOf": [
        {
          "$ref": "#/definitions/ChannelInfo"
        }
      ]
    },
    "total_sent": {
      "description": "The total number of tokens that have been sent over this channel (even if many have been returned, so balance is low)",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Amount"
      }
    }
  },
  "definitions": {
    "Amount": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cw20"
          ],
          "properties": {
            "cw20": {
              "$ref": "#/definitions/Cw20Coin"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ChannelInfo": {
      "type": "object",
      "required": [
        "connection_id",
        "counterparty_endpoint",
        "id"
      ],
      "properties": {
        "connection_id": {
          "description": "the connection this exists on (you can use to query client/consensus info)",
          "type": "string"
        },
        "counterparty_endpoint": {
          "description": "the remote channel/port we connect to",
          "allOf": [
            {
              "$ref": "#/definitions/IbcEndpoint"
            }
          ]
        },
        "id": {
          "description": "id of this channel",
          "type": "string"
        }
      }
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "IbcEndpoint": {
      "type": "object",
      "required": [
        "channel_id",
        "port_id"
      ],
      "properties": {
        "channel_id": {
          "type": "string"
        },
        "port_id": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
