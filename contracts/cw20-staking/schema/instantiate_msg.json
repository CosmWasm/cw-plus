{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "decimals",
    "exit_tax",
    "min_withdrawal",
    "name",
    "symbol",
    "unbonding_period",
    "validator"
  ],
  "properties": {
    "decimals": {
      "description": "decimal places of the derivative token (for UI)",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "exit_tax": {
      "description": "this is how much the owner takes as a cut when someone unbonds",
      "allOf": [
        {
          "$ref": "#/definitions/Decimal"
        }
      ]
    },
    "min_withdrawal": {
      "description": "This is the minimum amount we will pull out to reinvest, as well as a minimum that can be unbonded (to avoid needless staking tx)",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "name": {
      "description": "name of the derivative token",
      "type": "string"
    },
    "symbol": {
      "description": "symbol / ticker of the derivative token",
      "type": "string"
    },
    "unbonding_period": {
      "description": "This is the unbonding period of the native staking module We need this to only allow claims to be redeemed after the money has arrived",
      "allOf": [
        {
          "$ref": "#/definitions/Duration"
        }
      ]
    },
    "validator": {
      "description": "This is the validator that all tokens will be bonded to",
      "type": "string"
    }
  },
  "definitions": {
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Duration": {
      "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "height"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Time in seconds",
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
